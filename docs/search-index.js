var searchIndex = JSON.parse('{\
"leetcode":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Solution","best_rotation","borrow","borrow_mut","circle_game","find_restaurant","freq_alphabets","from","into","plates_between_candles","try_from","try_into","type_id"],"q":["leetcode","","","","","","","","","","","",""],"d":["","798 - Smallest Rotation with Highest Score (4 ms 4 MB)","","","LCP 42 - Circle Game (772 ms 3.7 MB)","599 - Minimum Index Sum of Two Lists (8 ms 2.3 MB)","1309 - Decrypt String from Alphabet to Integer Mapping (0 …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","2055 - Plates Between Candles (48 ms 9.6 MB)","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[["vec",3]],["usize",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["vec",3],["vec",3],["usize",0]],["usize",0]],[[["vec",3,[["string",3]]],["vec",3,[["string",3]]]],["vec",3,[["string",3]]]],[[["str",0]],["string",3]],[[]],[[]],[[["str",0],["vec",3]],["vec",3,[["usize",0]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"Solution"]]},\
"sort":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11],"n":["Solution","borrow","borrow_mut","from","into","merge_sort","quick_sort","try_from","try_into","type_id"],"q":["sort","","","","","","","","",""],"d":["","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Merge Sort Algorithm","Quick Sort Algorithm","","",""],"i":[0,1,1,1,1,1,1,1,1,1],"f":[null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["vec",3]],["vec",3]],[[["vec",3]],["vec",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"Solution"]]},\
"treap":{"doc":"","t":[0,0,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["map","set","IntoIter","Iter","IterMut","Range","RangeMut","TreapMap","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","contains_key","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","extend","extend","extend_one","extend_one","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_iter","get","get_key_value","get_mut","hash","hash","hash","hash","hash","hash","index","insert","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","iter_mut","len","len","len","len","len","len","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","range","range_mut","remove","remove_entry","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["treap","","treap::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","An ordered map based on a Treap.","","","","","","","","","","","","","Clears the map, removing all elements.","","","","","","","","","","","","","","","Returns <code>true</code> if the map contains a value for the specified …","","","","","","","","","","","","","","","","","","","","","","","Converts a <code>[(K, V); N]</code> into a <code>TreapMap&lt;(K, V)&gt;</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the value corresponding to the key.","Returns the key-value pair corresponding to the supplied …","Returns a mutable reference to the value corresponding to …","","","","","","","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Returns <code>true</code> if the map contains no elements.","Gets an iterator over the entries of the map, sorted by …","Gets a mutable iterator over the entries of the map, …","Returns the number of elements in the map.","","","","","","","","","","","","Makes a new, empty <code>TreapMap</code>.","","","","","","","","","","","","","","","","","","","","","","Constructs a double-ended iterator over a sub-range of …","Constructs a mutable double-ended iterator over a …","Removes a key from the map, returning the value at the key …","Removes a key from the map, returning the stored key and …","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,2,3,4,5,6,1,2,3,4,5,6,1,1,2,4,6,1,2,4,6,1,2,3,4,5,6,1,1,2,3,4,5,6,1,2,3,4,5,6,1,1,1,1,1,2,3,4,5,6,1,1,2,3,4,5,6,1,1,1,1,1,2,3,4,5,6,1,1,1,2,3,4,5,6,1,2,3,4,5,6,1,1,1,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,1,2,3,4,5,6,1,1,1,1,1,2,4,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6],"f":[null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["treapmap",3]],[[["",0]],["range",3]],[[["",0]],["iter",3]],[[["",0]],["intoiter",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["treapmap",3]],["ordering",4]],[[["",0],["range",3]],["ordering",4]],[[["",0],["rangemut",3]],["ordering",4]],[[["",0],["iter",3]],["ordering",4]],[[["",0],["itermut",3]],["ordering",4]],[[["",0],["intoiter",3]],["ordering",4]],[[["",0],["",0]],["bool",0]],[[],["treapmap",3]],[[],["range",3]],[[],["rangemut",3]],[[],["iter",3]],[[],["itermut",3]],[[],["intoiter",3]],[[["",0],["treapmap",3]],["bool",0]],[[["",0],["range",3]],["bool",0]],[[["",0],["rangemut",3]],["bool",0]],[[["",0],["iter",3]],["bool",0]],[[["",0],["itermut",3]],["bool",0]],[[["",0],["intoiter",3]],["bool",0]],[[["",0],["intoiterator",8]]],[[["",0],["intoiterator",8]]],[[["",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["",0],["",0]],["option",4]],[[["",0],["",0]],["option",4]],[[["",0],["",0]],["option",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["iter",3]],[[["",0]],["itermut",3]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["treapmap",3]],["bool",0]],[[["",0],["range",3]],["bool",0]],[[["",0],["rangemut",3]],["bool",0]],[[["",0],["iter",3]],["bool",0]],[[["",0],["itermut",3]],["bool",0]],[[["",0],["intoiter",3]],["bool",0]],[[]],[[["option",4,[["box",3]]]]],[[["option",4,[["box",3]]]]],[[["option",4,[["box",3]]]]],[[["option",4,[["box",3]]]]],[[["option",4,[["box",3,[["treapnode",3]]]]]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["treapmap",3]],["option",4,[["ordering",4]]]],[[["",0],["range",3]],["option",4,[["ordering",4]]]],[[["",0],["rangemut",3]],["option",4,[["ordering",4]]]],[[["",0],["iter",3]],["option",4,[["ordering",4]]]],[[["",0],["itermut",3]],["option",4,[["ordering",4]]]],[[["",0],["intoiter",3]],["option",4,[["ordering",4]]]],[[["",0]],["range",3]],[[["",0]],["rangemut",3]],[[["",0],["",0]],["option",4]],[[["",0],["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"TreapMap"],[3,"Range"],[3,"RangeMut"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"]]},\
"try_1":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Solution","borrow","borrow_mut","from","full_permutation","into","is_palindrome","josephs_ring","permutation","tower_of_hanoi","try_from","try_into","type_id"],"q":["try_1","","","","","","","","","","","",""],"d":["","","","Returns the argument unchanged.","Question 4 - Full Permutation","Calls <code>U::from(self)</code>.","Question 2 - Judge if a sentence is palindrome.","Question 1 - Josephs Ring Problem.","Question 4 - Full Permutation","Question 3 - Tower of Hanoi.","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["vec",3]],["vec",3,[["vec",3,[["clone",8]]]]]],[[]],[[["str",0]],["bool",0]],[[["i32",0],["i32",0]],["vec",3,[["bool",0]]]],[[["vec",3],["usize",0]],["vec",3]],[[["vec",3],["vec",3],["vec",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"Solution"]]},\
"try_2":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,11,11],"n":["Solution","borrow","borrow_mut","from","into","pentagram_game","red_and_black","sliding_puzzle","solve_n_queens","try_from","try_into","type_id"],"q":["try_2","","","","","","","","","","",""],"d":["","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Question 1 - Pentagram Game","Question 2 - Red and Black","Question 3 - Sliding Puzzle Problem","Question 4 - Eight Gueens Problem (0 ms 2.3 MB)","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[],["vec",3,[["vec",3,[["i32",0]]]]]],[[["vec",3]],["usize",0]],[[["vec",3],["vec",3],["",26,[["clone",8],["eq",8],["hash",8]]]],["option",4,[["usize",0]]]],[[["usize",0]],["vec",3,[["vec",3,[["string",3]]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"Solution"]]},\
"try_3":{"doc":"","t":[3,11,11,0,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["Solution","borrow","borrow_mut","btree","find_all_suspects","from","get_postorder_traversal","into","recover_lost_records","try_from","try_into","type_id","BTreeNode","InOrder","PostOrder","PreOrder","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","from","from","from","from","inorder","into","into","into","into","into_iter","into_iter","into_iter","left","new","new","new","new","next","next","next","postorder","preorder","right","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value"],"q":["try_3","","","","","","","","","","","","try_3::btree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Question 1 - Find All Suspects","Returns the argument unchanged.","Question 2 - Postorder Traversal","Calls <code>U::from(self)</code>.","Question 3 - hdu 4585 “Shaolin”","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,2,3,4,5,2,3,4,5,2,2,3,4,5,2,2,3,4,5,3,4,5,2,2,3,4,5,3,4,5,2,2,2,2,3,4,5,2,3,4,5,2,3,4,5,2],"f":[null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["vec",3],["usize",0]],["usize",0]],[[]],[[["vec",3],["vec",3]],["vec",3,[["",26,[["copy",8],["eq",8]]]]]],[[]],[[["vec",3]],["vec",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["option",4,[["box",3]]],["option",4,[["box",3]]],["option",4,[["box",3]]]],["option",4,[["box",3]]]],[[]],[[]],[[]],[[]],[[["",0]],["inorder",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["option",4,[["box",3]]]],[[["btreenode",3]]],[[["btreenode",3]]],[[["btreenode",3]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["postorder",3]],[[["",0]],["preorder",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null],"p":[[3,"Solution"],[3,"BTreeNode"],[3,"PreOrder"],[3,"InOrder"],[3,"PostOrder"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};